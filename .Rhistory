rownames(fData(AMR_raw_analytic_data[[l]])) <- rownames(MRcounts(AMR_raw_analytic_data[[l]]))
}
new_AMR_metadata <- as.data.table(pData(AMR_raw_analytic_data[[1]]), keep.rownames = TRUE)
names(new_AMR_metadata)[names(new_AMR_metadata) == "rn"] <- "ID"
new_AMR_metadata$resistome_raw_mapped_reads = colSums(MRcounts(AMR_raw_analytic_data[[1]]))
new_AMR_metadata$resistome_CSS_counts = colSums(MRcounts(AMR_analytic_data[[1]]))
## Resistome diversity
new_AMR_metadata$AMR_class_Richness = specnumber(t(MRcounts(AMR_raw_analytic_data[[1]])))
new_AMR_metadata$AMR_class_Shannon = diversity(t(MRcounts(AMR_raw_analytic_data[[1]])))
new_AMR_metadata$AMR_mech_Richness = specnumber(t(MRcounts(AMR_raw_analytic_data[[2]])))
new_AMR_metadata$AMR_mech_Shannon = diversity(t(MRcounts(AMR_raw_analytic_data[[2]])))
metadata <- new_AMR_metadata
## Run the analysis
#
## Pick the correct script that handles resistome data and/or microbiome data.
source('scripts/metagenomeSeq_qiime2.R')
source('scripts/metagenomeSeq_megares.R')
# Combine metadata with "melted counts"
# set keys first
setkey(amr_melted_raw_analytic,ID)
setkey(amr_melted_analytic,ID)
setkey(microbiome_melted_analytic,ID)
setkey(microbiome_melted_raw_analytic,ID)
setkey(metadata,ID)
setkey(microbiome_metadata,ID)
# Merge objects
microbiome_melted_analytic <- microbiome_melted_analytic[microbiome_metadata]
microbiome_melted_raw_analytic <- microbiome_melted_raw_analytic[microbiome_metadata]
amr_melted_raw_analytic <- amr_melted_raw_analytic[metadata]
amr_melted_analytic <- amr_melted_analytic[metadata]
### final figures
library(tidyverse)
library(RColorBrewer)
library(ggthemes)
## Figure 2 showing resistome composition and microbiome composition
AMR_class_sum <- amr_melted_analytic[Level_ID=="Class", .(sum_class= sum(Normalized_Count)),by=.(ID,sample, Name, Packaging, Treatment)][order(-Packaging )]
AMR_class_sum[,total:= sum(sum_class), by=.(ID)]
AMR_class_sum[,percentage:= sum_class/total ,by=.(ID, Name) ]
AMR_class_sum$Name = droplevels(AMR_class_sum$Name)
AMR_class_sum$Name = factor(AMR_class_sum$Name ,levels=c("Sulfonamides","Rifampin","Trimethoprim","Triclosan","Fluoroquinolones","Aminocoumarins","Nitrofuran","Fosfomycin" , "Elfamycins" ,"Phenicol","Bacitracin","Cationic antimicrobial peptides","Aminoglycosides", "MLS" ,"betalactams" , "Multi-drug resistance" , "Tetracyclines"))
AMR_class_sum$sample = factor(AMR_class_sum$sample ,levels=c("Sample 1.1","Sample 1.2","Sample 2.1","Sample 2.2","Sample 3.1","Sample 3.2","Sample 4.1",
"Sample 4.2","Sample 5.1","Sample 5.2","Sample 6.1","Sample 6.2","Sample 7.1","Sample 7.2","Sample 8.1","Sample 8.2",
"Sample 9.1","Sample 9.2","Sample 10.1","Sample 10.2","Sample 11.1","Sample 11.2","Sample 12.1","Sample 12.2","Sample 13.1","Sample 13.2","Sample 14.1",
"Sample 14.2","Sample 15.1","Sample 15.2","Sample 16.1","Sample 16.2"))
AMR_class_sum$Class <- AMR_class_sum$Name
#AMR_class_sum[,percentage:= round(sum_class/total, digits=2) ,by=.(ID, Name) ] removes some with low proportions
fig1_A <- ggplot(AMR_class_sum, aes(x = sample, y = percentage, fill = Class)) +
geom_bar(stat = "identity",colour = "black")+
facet_wrap( ~ Treatment, scales='free',ncol = 2) +
#scale_fill_brewer(palette="Dark2") +
theme(
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.text.x=element_text(size=24),
strip.text.y=element_text(size=24, angle=0),
axis.text.x=element_text(size=24, angle=30, hjust=1),
axis.text.y=element_text(size=22),
axis.title=element_text(size=26),
legend.position="right",
panel.spacing=unit(0.1, "lines"),
plot.title=element_text(size=32, hjust=0.5),
legend.text=element_text(size=15),
legend.title=element_text(size=20),
panel.background = element_rect(fill = "white")
) +
#ggtitle("Resistome composition by sample") +
xlab('') +
ylab('Relative abundance') +
scale_fill_tableau("Tableau 20", direction = -1)
fig1_A
dev.off()
fig1_A
microbiome_phylum_sum <- microbiome_melted_analytic[Level_ID=="Phylum", .(sum_phylum= sum(Normalized_Count)),by=.(ID,Sample, Name, Packaging, Treatment)][order(-Packaging )]
microbiome_phylum_sum[,total:= sum(sum_phylum), by=.(ID)]
microbiome_phylum_sum <- microbiome_melted_analytic[Level_ID=="Phylum", .(sum_phylum= sum(Normalized_Count)),by=.(ID,sample, Name, Packaging, Treatment)][order(-Packaging )]
microbiome_phylum_sum[,total:= sum(sum_phylum), by=.(ID)]
microbiome_phylum_sum[,percentage:= sum_phylum/total ,by=.(ID, Name) ]
# only keep taxa greater than 1%
microbiome_phylum_sum <- microbiome_phylum_sum[percentage < .01, Name := 'Low Abundance Phyla (< 1%)' ]
microbiome_phylum_sum[,total:= sum(sum_phylum), by=.(ID)]
microbiome_phylum_sum[,percentage:= sum_phylum/total ,by=.(ID, Name) ]
microbiome_phylum_sum$Name = droplevels(microbiome_phylum_sum$Name)
microbiome_phylum_sum$Name = factor(microbiome_phylum_sum$Name ,levels=c("Low Abundance Phyla (< 1%)","Planctomycetes","Gemmatimonadetes","Chloroflexi","Verrucomicrobia", "Acidobacteria","Actinobacteria" ,"Bacteroidetes" , "Proteobacteria" , "Firmicutes"))
microbiome_phylum_sum$Sample = factor(microbiome_phylum_sum$sample ,levels=c("Sample 1","Sample 2","Sample 3","Sample 4","Sample 5","Sample 6","Sample 7","Sample 8","Sample 9","Sample 10","Sample 11",
"Sample 12","Sample 13","Sample 14","Sample 15","Sample 16"))
microbiome_phylum_sum$Phylum <- microbiome_phylum_sum$Name
#microbiome_phylum_sum[,percentage:= round(sum_class/total, digits=2) ,by=.(ID, Name) ] removes some with low proportions
fig1_B <- ggplot(microbiome_phylum_sum, aes(x = Sample, y = percentage, fill = Phylum)) +
geom_bar(stat = "identity")+
facet_wrap( ~ Treatment, scales='free',ncol = 2) +
#scale_fill_brewer(palette="Dark2") +
theme(
panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),
strip.text.x=element_text(size=24),
strip.text.y=element_text(size=24, angle=0),
axis.text.x=element_text(size=24, angle=30, hjust=1),
axis.text.y=element_text(size=22),
axis.title=element_text(size=26),
legend.position="right",
panel.spacing=unit(0.1, "lines"),
plot.title=element_text(size=32, hjust=0.5),
legend.text=element_text(size=15),
legend.title=element_text(size=20),
panel.background = element_rect(fill = "white")
) +
scale_fill_tableau("Tableau 20", direction = "1") +
#ggtitle("Microbiome composition in by treatment (only taxa > 1% per sample)") +
xlab('') +
ylab('Relative abundance')
fig1_B
## Combine figures
figure <- ggarrange(fig1_A, fig1_B,
labels = c("A)", "B)"),
ncol = 1, nrow = 2, vjust = 1.4, font.label = list(size = 30, color = "black", face =
"bold", family = NULL))
library(ggpubr)
## Combine figures
figure <- ggarrange(fig1_A, fig1_B,
labels = c("A)", "B)"),
ncol = 1, nrow = 2, vjust = 1.4, font.label = list(size = 30, color = "black", face =
"bold", family = NULL))
figure
# Output jpeg figure
jpeg("FC_ground_beef_manuscript_figures/Figure2-FC_meat_resistome_and_microbiome_composition_by_Treatment.jpeg", width =1850, height = 1250)
figure
dev.off()
#FC_meat_anosim code
library(vegan)
#
##
###
####
##### AMR ####
####
###
## AMR by treatment group
#
dist_AMR_class <- vegdist(decostand(t(MRcounts(AMR_analytic_data[[1]], norm=FALSE)), "hell"), "euclidean")
metaMDS_AMR_class <- metaMDS(dist_AMR_class, distance="none",symmetric=TRUE, trymax=100)
dist_AMR_mech <- vegdist(decostand(t(MRcounts(AMR_analytic_data[[2]], norm=FALSE)), "hell"), "euclidean")
metaMDS_AMR_mech <- metaMDS(dist_AMR_mech, distance="none",symmetric=TRUE, trymax=100)
# Anosim testing
anosim(metaMDS_AMR_class$points,pData(AMR_analytic_data[[1]])$Treatment, distance='euclidean')
anosim(metaMDS_AMR_mech$points,pData(AMR_analytic_data[[2]])$Treatment, distance='euclidean')
#
##
###
####
##### microbiome ####
####
###
##
#
dist_microbiome_phylum <- vegdist(decostand(t(MRcounts(microbiome_analytic_data[[2]], norm=FALSE)), "hell"), "euclidean")
metaMDS_microbiome_phylum <- metaMDS(dist_microbiome_phylum, distance="none",symmetric=TRUE, trymax=100)
dist_microbiome_class <- vegdist(decostand(t(MRcounts(microbiome_analytic_data[[3]], norm=FALSE)), "hell"), "euclidean")
metaMDS_microbiome_class <- metaMDS(dist_microbiome_class, distance="none",symmetric=TRUE, trymax=100)
dist_microbiome_order <- vegdist(decostand(t(MRcounts(microbiome_analytic_data[[4]], norm=FALSE)), "hell"), "euclidean")
metaMDS_microbiome_order <- metaMDS(dist_microbiome_order, distance="none",symmetric=TRUE, trymax=100)
dist_microbiome_family <- vegdist(decostand(t(MRcounts(microbiome_analytic_data[[5]], norm=FALSE)), "hell"), "euclidean")
metaMDS_microbiome_family <- metaMDS(dist_microbiome_family, distance="none",symmetric=TRUE, trymax=100)
dist_microbiome_genus <- vegdist(decostand(t(MRcounts(microbiome_analytic_data[[6]], norm=FALSE)), "hell"), "euclidean")
metaMDS_microbiome_genus <- metaMDS(dist_microbiome_genus, distance="none",symmetric=TRUE, trymax=100)
dist_microbiome_species <- vegdist(decostand(t(MRcounts(microbiome_analytic_data[[7]], norm=FALSE)), "hell"), "euclidean")
metaMDS_microbiome_species <- metaMDS(dist_microbiome_species, distance="none",symmetric=TRUE, trymax=100)
# Anosim testing
anosim(metaMDS_microbiome_phylum$points,pData(microbiome_analytic_data[[2]])$Treatment, distance='euclidean')
anosim(metaMDS_microbiome_class$points,pData(microbiome_analytic_data[[3]])$Treatment, distance='euclidean')
anosim(metaMDS_microbiome_order$points,pData(microbiome_analytic_data[[4]])$Treatment, distance='euclidean')
anosim(metaMDS_microbiome_family$points,pData(microbiome_analytic_data[[5]])$Treatment, distance='euclidean')
anosim(metaMDS_microbiome_genus$points,pData(microbiome_analytic_data[[6]])$Treatment, distance='euclidean')
anosim(metaMDS_microbiome_species$points,pData(microbiome_analytic_data[[7]])$Treatment, distance='euclidean')
##
plot(metaMDS_AMR_class, type="none", display=c("sites"))
points(metaMDS_AMR_class, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[1]])$sample))
groupz <- sort(unique(pData(AMR_analytic_data[[1]])$sample))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_class, pData(AMR_analytic_data[[1]])$sample,font=2, cex=1.5, col=i, show.groups=groupz[i])}
pData(AMR_analytic_data[[1]])$sample
as.factor(pData(AMR_analytic_data[[1]])$sample)
View(pData(AMR_analytic_data[[1]]))
## Run the analysis
#
## Pick the correct script that handles resistome data and/or microbiome data.
source('scripts/metagenomeSeq_qiime2.R')
source('scripts/metagenomeSeq_megares.R')
setkey(amr_melted_raw_analytic,ID)
setkey(amr_melted_analytic,ID)
setkey(microbiome_melted_analytic,ID)
setkey(microbiome_melted_raw_analytic,ID)
setkey(metadata,ID)
setkey(microbiome_metadata,ID)
# Merge objects
microbiome_melted_analytic <- microbiome_melted_analytic[microbiome_metadata]
microbiome_melted_raw_analytic <- microbiome_melted_raw_analytic[microbiome_metadata]
amr_melted_raw_analytic <- amr_melted_raw_analytic[metadata]
amr_melted_analytic <- amr_melted_analytic[metadata]
# Explore the 'scripts/ANOSIM.R' script for ordination and ANOSIM tests
##
plot(metaMDS_AMR_class, type="none", display=c("sites"))
points(metaMDS_AMR_class, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[1]])$sample))
groupz <- sort(unique(pData(AMR_analytic_data[[1]])$sample))
points(metaMDS_AMR_class, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[1]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[1]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_class, pData(AMR_analytic_data[[1]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
plot(metaMDS_AMR_mech, type="none", display=c("sites"))
points(metaMDS_AMR_mech, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[2]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[2]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_mech, pData(AMR_analytic_data[[2]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
legend("bottom", pData(AMR_analytic_data[[1]])$SampleID, xpd = TRUE, horiz = TRUE, inset = c(0,0), bty = "n", pch = c(19), col = 1:4, cex = 1.8)
##
plot(metaMDS_AMR_class, type="none", display=c("sites"))
points(metaMDS_AMR_class, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[1]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[1]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_class, pData(AMR_analytic_data[[1]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
legend("bottom", pData(AMR_analytic_data[[1]])$SampleID, xpd = TRUE, horiz = TRUE, inset = c(0,0), bty = "n", pch = c(19), col = 1:4, cex = 1.8)
legend("bottom", pData(AMR_analytic_data[[1]])$SampleID)
points(metaMDS_AMR_class, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[1]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[1]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_class, pData(AMR_analytic_data[[1]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
legend("topright", legend = levels(pData(AMR_analytic_data[[1]])$SampleID),col = unique(pData(AMR_analytic_data[[1]])$SampleID), pch = 20, title = "AMR Mech - Arrival by Treatment",bty = "n")
##
plot(metaMDS_AMR_class, type="none", display=c("sites"))
points(metaMDS_AMR_class, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[1]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[1]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_class, pData(AMR_analytic_data[[1]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
legend("topright", legend = levels(pData(AMR_analytic_data[[1]])$SampleID),col = unique(pData(AMR_analytic_data[[1]])$SampleID), pch = 20, title = "AMR Mech - Arrival by Treatment",bty = "n")
legend("bottom", legend = levels(pData(AMR_analytic_data[[1]])$SampleID),col = unique(pData(AMR_analytic_data[[1]])$SampleID), pch = 20, title = "AMR Mech - Arrival by Treatment",bty = "n")
dev.off()
jpeg("FC_ground_beef_manuscript_figures/Figure1_AMR_dilution_ordination.jpeg")
par(mfrow = c(2,1))
par(cex = 0.6)
par(mar = c(3, 4, 1, 1))
par(oma = c(4,3,4,1)) ## moves the plot area, not for individual plots
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
##
plot(metaMDS_AMR_class, type="none", display=c("sites"))
points(metaMDS_AMR_class, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[1]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[1]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_class, pData(AMR_analytic_data[[1]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
mtext(side = 2, "AMR Class", line = 4, cex=2)
plot(metaMDS_AMR_mech, type="none", display=c("sites"))
points(metaMDS_AMR_mech, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[2]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[2]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_mech, pData(AMR_analytic_data[[2]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
mtext(side = 2, "AMR Mechanism", line = 4, cex=2)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", levels(pData(AMR_analytic_data[[1]])$SampleID), xpd = TRUE, horiz = TRUE, inset = c(0,0), bty = "n", pch = c(19), col = unique(pData(AMR_analytic_data[[1]])$SampleID), cex = 1.8)
#identify(fig,"sites")
dev.off()
#identify(fig,"sites")
dev.off()
par(mfrow = c(2,1))
par(cex = 0.6)
par(mar = c(3, 4, 1, 1))
par(oma = c(4,3,4,1)) ## moves the plot area, not for individual plots
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
##
plot(metaMDS_AMR_class, type="none", display=c("sites"))
points(metaMDS_AMR_class, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[1]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[1]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_class, pData(AMR_analytic_data[[1]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
mtext(side = 2, "AMR Class", line = 4, cex=2)
plot(metaMDS_AMR_mech, type="none", display=c("sites"))
points(metaMDS_AMR_mech, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[2]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[2]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_mech, pData(AMR_analytic_data[[2]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
mtext(side = 2, "AMR Mechanism", line = 4, cex=2)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", levels(pData(AMR_analytic_data[[1]])$SampleID), xpd = TRUE, horiz = TRUE, inset = c(0,0), bty = "n", pch = c(19), col = unique(pData(AMR_analytic_data[[1]])$SampleID), cex = 1.8)
#
#identify(fig,"sites")
dev.off()
#identify(fig,"sites")
dev.off()
par(mfrow = c(2,1))
par(cex = 0.6)
par(mar = c(3, 4, 1, 1))
par(oma = c(4,3,4,1)) ## moves the plot area, not for individual plots
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
##
plot(metaMDS_AMR_class, type="none", display=c("sites"))
points(metaMDS_AMR_class, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[1]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[1]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_class, pData(AMR_analytic_data[[1]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
mtext(side = 2, "AMR Class", line = 4, cex=2)
plot(metaMDS_AMR_mech, type="none", display=c("sites"))
points(metaMDS_AMR_mech, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[2]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[2]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_mech, pData(AMR_analytic_data[[2]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
mtext(side = 2, "AMR Mechanism", line = 4, cex=2)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("right", levels(pData(AMR_analytic_data[[1]])$SampleID), xpd = TRUE, horiz = TRUE, inset = c(0,0), bty = "n", pch = c(19), col = unique(pData(AMR_analytic_data[[1]])$SampleID), cex = 1.8)
#identify(fig,"sites")
dev.off()
par(mfrow = c(2,1))
par(cex = 0.6)
par(mar = c(3, 4, 1, 1))
par(oma = c(4,3,4,1)) ## moves the plot area, not for individual plots
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
##
plot(metaMDS_AMR_class, type="none", display=c("sites"))
points(metaMDS_AMR_class, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[1]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[1]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_class, pData(AMR_analytic_data[[1]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
mtext(side = 2, "AMR Class", line = 4, cex=2)
plot(metaMDS_AMR_mech, type="none", display=c("sites"))
points(metaMDS_AMR_mech, display="sites", pch=20, col=as.numeric(pData(AMR_analytic_data[[2]])$SampleID))
groupz <- sort(unique(pData(AMR_analytic_data[[2]])$SampleID))
for(i in seq(groupz)) {ordispider(metaMDS_AMR_mech, pData(AMR_analytic_data[[2]])$SampleID,font=2, cex=1.5, col=i, show.groups=groupz[i])}
mtext(side = 2, "AMR Mechanism", line = 4, cex=2)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("right", levels(pData(AMR_analytic_data[[1]])$SampleID), xpd = TRUE, horiz = TRUE, inset = c(0,0), bty = "n", pch = c(19), col = unique(pData(AMR_analytic_data[[1]])$SampleID), cex = 1.8)
#identify(fig,"sites")
par(mfrow = c(2, 2))
par(cex = 0.6)
par(mar = c(3, 4, 1, 1))
par(oma = c(4,3,4,1)) ## moves the plot area, not for individual plots
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
boxplot(metadata$AMR_class_Richness ~ metadata$Treatment, col=c("Red","Grey"),names=FALSE)
mtext(side = 3, "AMR Class", line = 1, cex=2)
mtext(side = 2, "Richness", line = 4, cex=2)
boxplot(metadata$AMR_mech_Richness ~ metadata$Treatment,col=c("Red","Grey"),names=FALSE)
#title("AMR mechanism richness by group")
mtext(side = 3, "AMR Mechanism", line = 1, cex=2)
boxplot(metadata$AMR_class_Shannon ~ metadata$Treatment, col=c("Red","Grey"),names=FALSE)
mtext(side = 2, "Shannon\'s Diversity", line = 4, cex=2)
#title("AMR Class diversity by group")
boxplot(metadata$AMR_mech_Shannon ~ metadata$Treatment, col=c("Red","Grey"),names=FALSE)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("CONV","RWA"),x.intersp = .3, xpd = TRUE, horiz = TRUE, inset = c(9, 0), bty = "n", pch = 15, fill = c("Red","Grey"), cex = 1.5)
microbiome_phylum_sum <- microbiome_melted_analytic[Level_ID=="Phylum", .(sum_phylum= sum(Normalized_Count)),by=.(ID, Name, Packaging, Treatment)][order(-Packaging )]
microbiome_phylum_sum[,total:= sum(sum_phylum), by=.(ID)]
microbiome_phylum_sum[,percentage:= sum_phylum/total ,by=.(ID, Name) ]
# only keep taxa greater than 1%
microbiome_phylum_sum <- microbiome_phylum_sum[percentage > .01]
microbiome_phylum_sum[,total:= sum(sum_phylum), by=.(ID)]
microbiome_phylum_sum[,percentage:= sum_phylum/total ,by=.(ID, Name) ]
jpeg("FC_ground_beef_manuscript_figures/Figure6_Microbiome_diversity.jpeg")
par(mfrow = c(3,1))
par(cex = 0.6)
par(mar = c(3, 4, 1, 1))
par(oma = c(4,3,4,1)) ## moves the plot area, not for individual plots
par(tcl = -0.5)
par(mgp = c(2, 0.6, 0))
plot(metaMDS_microbiome_phylum, type="none", display=c("sites"))
points(metaMDS_microbiome_phylum, display="sites", pch=20, col=as.numeric(pData(microbiome_analytic_data[[2]])$Treatment))
groupz <- sort(unique(pData(microbiome_analytic_data[[2]])$Treatment))
for(i in seq(groupz)) {ordispider(metaMDS_microbiome_phylum, pData(microbiome_analytic_data[[2]])$Treatment,font=2, cex=1.5, col=i, show.groups=groupz[i])}
#mtext(side = 3, "Microbiome Ordination", line = 1, cex=2)
mtext(side = 2, "Phylum", line = 4, cex=2)
plot(metaMDS_microbiome_class, type="none", display=c("sites"))
points(metaMDS_microbiome_class, display="sites", pch=20, col=as.numeric(pData(microbiome_analytic_data[[3]])$Treatment))
groupz <- sort(unique(pData(microbiome_analytic_data[[3]])$Treatment))
metaMDS_microbiome_phylum
plot(metaMDS_microbiome_phylum, type="none", display=c("sites"))
points(metaMDS_microbiome_phylum, display="sites", pch=20, col=as.numeric(pData(microbiome_analytic_data[[2]])$Treatment))
par(mfrow = c(2, 3))
dev.off()
par(mfrow = c(2, 3))
par(cex = 0.6)
par(mar = c(3, 4, 1, 1))
par(oma = c(4,3,4,1)) ## moves the plot area, not for individual plots
par(tcl = -0.25)
par(mgp = c(2, 0.6, 0))
boxplot(microbiome_metadata$microbiome_phylum_Richness ~ microbiome_metadata$Treatment, col=c("Red","Grey"),names=FALSE)
mtext(side = 3, "Phylum", line = 1, cex=2)
mtext(side = 2, "Richness", line = 4, cex=2)
boxplot(microbiome_metadata$microbiome_class_Richness ~ microbiome_metadata$Treatment, col=c("Red","Grey"),names=FALSE)
mtext(side = 3, "Class", line = 1, cex=2)
boxplot(microbiome_metadata$microbiome_order_Richness ~ microbiome_metadata$Treatment, col=c("Red","Grey"),names=FALSE)
mtext(side = 3, "Order", line = 1, cex=2)
boxplot(microbiome_metadata$microbiome_phylum_Shannon ~ microbiome_metadata$Treatment, col=c("Red","Grey"),names=FALSE)
mtext(side = 2, "Shannon's Diversity", line = 4, cex=2)
boxplot(microbiome_metadata$microbiome_class_Shannon ~ microbiome_metadata$Treatment, col=c("Red","Grey"),names=FALSE)
boxplot(microbiome_metadata$microbiome_order_Shannon ~ microbiome_metadata$Treatment, col=c("Red","Grey"),names=FALSE)
par(fig = c(0, 1, 0, 1), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), new = TRUE)
plot(0, 0, type = "n", bty = "n", xaxt = "n", yaxt = "n")
legend("bottom", c("CONV","RWA"),x.intersp = .5, xpd = TRUE, horiz = TRUE, inset = c(9, 0), bty = "n", pch = 15, fill = c("Red","Grey"), cex = 1.5)
## Average and standard deviations  ######
metadata_DT <- data.table(metadata)
metadata_DT[,.(mean_phred = mean(phred), sd_phred = sd(phred), min_phred = min(phred), max_phred = max(phred),
mean_human_reads = mean(human_contaminant_reads), max_human_reads = max(human_contaminant_reads),
min_human_reads = min(human_contaminant_reads), sum_human_reads = sum(human_contaminant_reads),
total_reads = sum(as.numeric(Non_host_paired_reads)))][,.(percent_hum_contamination = sum_human_reads/total_reads * 100)]
metadata_DT[,.(mean_unclassified = mean(Unclassified_read_percentage), max_unclassified = max(Unclassified_read_percentage), min_unclassified = min(Unclassified_read_percentage)) ]
amr_group_check <- amr_group_raw[!group %in% snp_regex, ]
important_AMR_regex = c('OXA',
'SME',
'sme',
'IMI',
'NDM',
'GES',
'KPC',
'CPHA',
'TEM',
'SHV',
'CTX',
'CMY',
'VGA',
'VGAB',
'VGAD',
'VATA',
'VATB',
'VATC',
'VATD',
'VATE',
'CFRA')
amr_raw_important_AMR <- amr_group_check[group %in% important_AMR_regex, ]
View(amr_raw_important_AMR[group %in% important_AMR_regex,  ])
melted_important_AMR <- amr_melted_raw_analytic[ Level_ID =='Group' & Name %in% important_AMR_regex,  ][Normalized_Count > 0, .(num_samples= .N, Normalized_Count= sum(Normalized_Count),log_Normalized_Count= log(sum(Normalized_Count))),by=.(Name, Packaging_samples)]#[order(-sum_class )]
melted_important_AMR[,.(sum_important_genes = sum(Normalized_Count))]
ggplot(data = melted_important_AMR , aes(x = Packaging_samples, y = Name)) +
geom_tile(aes(fill = log(Normalized_Count))) +
scale_fill_gradient(low = "white", high = "steelblue") +
geom_text(aes(label = num_samples), size=5)
Treatment_read_count_comparison <- metadata[,.(total_raw_reads = sum(Raw_paired_reads),mean_raw_reads = mean(Raw_paired_reads), sd_raw_reads = sd(Raw_paired_reads)), by=Treatment]
Packaging_read_count_comparison <- metadata[,.(total_raw_reads = sum(Raw_paired_reads),mean_raw_reads = mean(Raw_paired_reads), sd_raw_reads = sd(Raw_paired_reads), min_raw_reads = min(Raw_paired_reads),max_raw_reads = max(Raw_paired_reads)), by=Packaging]
ggplot(microbiome_metadata, aes(x=Packaging, y=Raw_paired_reads, color=Packaging)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center',
position=position_dodge(1) , dotsize=1)
ggsave("FC_ground_beef_manuscript_figures/Supplemental_figures/Supp_FC_meat_Microbiome_raw_reads-by_Packaging.jpeg", width = 30, height = 20, units = "cm")
ggplot(metadata, aes(x=Packaging, y=Raw_paired_reads, color=Packaging)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center',
position=position_dodge(1) , dotsize=1)
ggsave("FC_ground_beef_manuscript_figures/Supplemental_figures/Supp_FC_meat_AMR_raw_reads-by_Packaging.jpeg", width = 30, height = 20, units = "cm")
ggplot(microbiome_metadata, aes(x=Packaging, y=Raw_paired_reads, color=Packaging)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center',
position=position_dodge(1) , dotsize=1)
ggsave("FC_ground_beef_manuscript_figures/Supplemental_figures/Supp_Microbiome_raw_reads-by_Packaging.jpeg", width = 30, height = 20, units = "cm")
ggplot(metadata, aes(x=Packaging, y=Raw_paired_reads, color=Packaging)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center',
position=position_dodge(1) , dotsize=1)
ggsave("FC_ground_beef_manuscript_figures/Supplemental_figures/Supp_AMR_raw_reads-by_Packaging.jpeg", width = 30, height = 20, units = "cm")
## Resistome sequencing results
ggplot(metadata, aes(x=Packaging, y=Raw_paired_reads, color=Packaging)) +
geom_boxplot() +
geom_dotplot(binaxis='y', stackdir='center', position=position_dodge(1) , dotsize=1)+
theme(
strip.text.x=element_text(size=24),
strip.text.y=element_text(size=24, angle=0),
axis.text.x=element_blank(), #element_text(size=16, angle=20, hjust=1)
axis.text.y=element_text(size=22),
axis.title=element_text(size=26),
legend.position="right",
panel.spacing=unit(0.1, "lines"),
plot.title=element_text(size=32, hjust=0.5),
legend.text=element_text(size=10),
legend.title=element_text(size=20),
panel.background = element_rect(fill = "white")
)
ggsave("AMR_raw_reads-by_Packaging.jpeg", width = 30, height = 20, units = "cm")
gene_counts = amr_melted_analytic[Level_ID=='Gene',]
setkey(gene_counts,Name)
setkey(annotations,header)
gene_counts <- gene_counts[annotations][ID != "NA"]
setkey(gene_counts,ID)
## Total AMR percentage for study
total_amr_percentage <- gene_counts[,.(class_sum = sum(Normalized_Count)), by= .(class) ][,total:=sum(class_sum)][,class_percentage:= class_sum/total * 100]
mech_percentage_byclass <- gene_counts[,.(class_sum = sum(Normalized_Count)), by= .(mechanism,class) ][,class_percentage:= class_sum/sum(class_sum) * 100 , by = .(class)]
total_amr_percentage
mech_percentage_byclass <- gene_counts[,.(class_sum = sum(Normalized_Count)), by= .(mechanism,class) ][,class_percentage:= class_sum/sum(class_sum) * 100 , by = .(class)]
mech_percentage_byclass
## Total AMR abundance by treatment group
AMR_counts_by_Treatment <- gene_counts[,.(class_sum = sum(Normalized_Count), mean_class = mean(Normalized_Count), sd_class = sd(Normalized_Count)), by= .(Treatment) ]
AMR_counts_by_Packaging <- gene_counts[,.(class_sum = sum(Normalized_Count), mean_class = mean(Normalized_Count), sd_class = sd(Normalized_Count)), by= .(Packaging) ]
AMR_counts_by_Treatment
AMR_counts_by_Packaging
# AMR percentage by Group
total_amr_percentage <- gene_counts[,.(class_sum = sum(Normalized_Count)), by= .(Group, class) ][,class_percentage:= class_sum/sum(class_sum) * 100, by = Group]
total_amr_percentage <- gene_counts[,.(class_sum = sum(Normalized_Count)), by= .(Treatment, class) ][,class_percentage:= class_sum/sum(class_sum) * 100, by = Treatment]
total_amr_percentage
# Total AMR percentage
total_amr_percentage <- gene_counts[,.(class_sum = sum(Normalized_Count)), by= .(class,mechanism) ][,class_percentage:= class_sum/sum(class_sum) * 100]
total_amr_percentage[, .(sum = sum(class_percentage))]
total_amr_percentage
# Microbiome
micro_count_summary_per_sample = microbiome_melted_analytic[Level_ID=="Phylum", .(total_counts = sum(Normalized_Count), mean_counts = mean(Normalized_Count), std_dev_counts = sd(Normalized_Count)), by = ID]
micro_count_summary_project = count_summary_per_sample[,.(total_reads = sum(total_counts),mean_per_sample=mean(total_counts), std_dev_counts= sd(total_counts))]
micro_count_summary_project = micro_count_summary_per_sample[,.(total_reads = sum(total_counts),mean_per_sample=mean(total_counts), std_dev_counts= sd(total_counts))]
micro_count_summary_project
order_counts = microbiome_melted_analytic[Level_ID=='Order',]
setkey(order_counts,Name)
order_annotations = microbiome_taxonomy[,id := NULL]
setkey(order_annotations, Order)  # Data tables are SQL objects with optional primary keys
order_annotations <- unique(order_annotations, by = key(order_annotations))
setkey(order_annotations,Order)
order_counts <- order_counts[order_annotations][ID != "NA"]
setkey(order_counts,ID)
order_counts
## Total AMR percentage for study
total_microbiome_percentage <- order_counts[,.(Order_sum = sum(Normalized_Count)), by= .(Name) ][,total:=sum(Order_sum)][,Order_percentage:= signif(Order_sum/total * 100,digits=3)]
microbiome_percentage_perPhylum <- order_counts[,.(sum_hits = sum(Normalized_Count)), by= .(Phylum, Class) ][,Class_percentage:= sum_hits/sum(sum_hits) * 100, by = .(Phylum)]
total_phylum <- microbiome_melted_analytic[Level_ID=="Phylum"][,.(sum_phylum = sum(Normalized_Count)), by = Name][,total := sum(sum_phylum)][,proportion := signif(sum_phylum/total * 100,digits=3) , by = Name]
total_class <- microbiome_melted_analytic[Level_ID=="Class"][,.(sum_class = sum(Normalized_Count)), by = Name][,total := sum(sum_class)][,proportion := signif(sum_class/total * 100,digits=3), by = Name]
total_order <- microbiome_melted_analytic[Level_ID=="Order"][,.(sum_order = sum(Normalized_Count)), by = Name][,total := sum(sum_order)][,proportion := signif(sum_order/total * 100,digits=3), by = Name]
total_order
total_order
